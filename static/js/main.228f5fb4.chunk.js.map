{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","pokemon","state","fetch","this","url","then","response","json","pokeImg","sprites","front_shiny","pokeHeight","height","pokeWeight","weight","newPokemon","setState","className","name","src","alt","Component","CardList","props","pokemons","map","key","SearchBox","placeholder","handleChange","type","onChange","App","searchField","resp","results","filteredPokemons","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qTAGqBA,G,wDACjB,cAAuB,IAAD,EAATC,EAAS,EAATA,QAAS,4BAClB,gBACKC,MAAQ,CACTD,QAASA,GAHK,E,gEAOD,IAAD,OAChBE,MAAMC,KAAKF,MAAMD,QAAQI,KACxBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,IAAME,EAAUF,EAASG,QAAQC,YAC3BC,EAAaL,EAASM,OACtBC,EAAaP,EAASQ,OAEtBC,EAAa,EAAKd,MAAMD,QAE9Be,EAAWL,YAAcF,EACzBO,EAAWH,OAASD,EACpBI,EAAWD,OAASD,EAEpB,EAAKG,SAAS,CACVhB,QAASe,S,+BASjB,OACI,yBAAKE,UAAU,kBACV,gCAAOd,KAAKF,MAAMD,QAAQkB,KAA1B,KACA,yBAAKC,IAAKhB,KAAKF,MAAMD,QAAQU,YAAaU,IAAI,YAC9C,uCAAcjB,KAAKF,MAAMD,QAAQY,QACjC,uCAAcT,KAAKF,MAAMD,QAAQc,a,GArChBO,cCGrBC,G,MAAW,SAAAC,GAAK,OACzB,yBAAKN,UAAU,aACTM,EAAMC,SAASC,KAAI,SAAAzB,GAAO,OAC3B,kBAAC,EAAD,CAAM0B,IAAK1B,EAAQkB,KAAMlB,QAASA,UCL9B2B,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACAZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCqCCG,G,wDAvCb,aAAe,IAAD,8BACZ,gBAEK/B,MAAQ,CACXuB,SAAU,GACVS,YAAa,IALH,E,gEASO,IAAD,OAClB/B,MAAM,qCACLG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA6B,GAAI,OAAI,EAAKlB,SAAS,CAC1BQ,SAAUU,EAAKC,e,+BAKT,IAAD,SAC2BhC,KAAKF,MAA/BuB,EADD,EACCA,SAAUS,EADX,EACWA,YACZG,EAAmBZ,EAASa,QAAO,SAAArC,GAAO,OAC9CA,EAAQkB,KAAKoB,cAAcC,SAASN,EAAYK,kBAGlD,OACE,yBAAKrB,UAAU,OACb,wBAAIA,UAAU,SAAd,iBACA,kBAAC,EAAD,CACEW,YAAY,kBACZC,aAAe,SAAAW,GAAC,OAAI,EAAKxB,SAAS,CAAEiB,YAAaO,EAAEC,OAAOC,WAE5D,kBAAC,EAAD,CAAUlB,SAAUY,S,GAhCVf,cCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.228f5fb4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './card.css';\n\nexport default class Card extends Component {\n    constructor({pokemon}){\n        super();\n        this.state = {\n            pokemon: pokemon\n        }\n    }\n\n    componentDidMount() {\n        fetch(this.state.pokemon.url)\n        .then(response => response.json())\n        .then(response => {\n            const pokeImg = response.sprites.front_shiny\n            const pokeHeight = response.height\n            const pokeWeight = response.weight\n\n            const newPokemon = this.state.pokemon\n\n            newPokemon.front_shiny = pokeImg\n            newPokemon.height = pokeHeight\n            newPokemon.weight = pokeWeight\n\n            this.setState({\n                pokemon: newPokemon\n            });\n          }\n        )\n    \n        \n    }\n\n    render() {\n        return (\n            <div className='card-container'>\n                 <h1> { this.state.pokemon.name } </h1>\n                 <img src={this.state.pokemon.front_shiny} alt=\"pokemon\"></img>\n                 <p> Height: { this.state.pokemon.height }</p>\n                 <p> Weight: { this.state.pokemon.weight }</p>\n             </div>\n        )\n    }\n}\n","import React from 'react';\n\nimport Card  from '../card/card';\n\nimport './card-list.css'\n\nexport const CardList = props => (\n    <div className='card-list'>\n        { props.pokemons.map(pokemon => (\n         <Card key={pokemon.name} pokemon={pokemon}></Card>\n        ))}\n    </div>\n)\n   ","import React from 'react';\n\nimport './search-box.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n    className='search'\n    type=\"search\" \n    placeholder= {placeholder}\n    onChange={handleChange}\n    />\n)","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list'\nimport { SearchBox } from './components/search-box/search-box'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      pokemons: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://pokeapi.co/api/v2/pokemon')\n    .then(response => response.json())\n    .then(resp => this.setState({\n      pokemons: resp.results\n    }))\n  }\n\n\n  render() {\n    const { pokemons, searchField } = this.state\n    const filteredPokemons = pokemons.filter(pokemon =>\n      pokemon.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return (\n      <div className=\"App\">\n        <h1 className='title'>Shiny Pokedex</h1>\n        <SearchBox \n          placeholder='search pokemons'\n          handleChange={ e => this.setState({ searchField: e.target.value }) }\n        />\n        <CardList pokemons={filteredPokemons}>\n        </ CardList>\n          \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}